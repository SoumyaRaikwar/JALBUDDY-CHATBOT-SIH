version: '3.8'

services:
  # Zookeeper (Kafka dependency)
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: jalbuddy-zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami
    networks:
      - jalbuddy-network
    restart: unless-stopped

  # Kafka Broker
  kafka:
    image: bitnami/kafka:latest
    container_name: jalbuddy-kafka
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/bitnami
    networks:
      - jalbuddy-network
    restart: unless-stopped

  # Weaviate (Vector DB alternative)
  weaviate:
    image: semitechnologies/weaviate:1.24.4
    container_name: jalbuddy-weaviate
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
    ports:
      - "8082:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - jalbuddy-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jalbuddy-postgres
    environment:
      POSTGRES_DB: jalbuddy
      POSTGRES_USER: jalbuddy_user
      POSTGRES_PASSWORD: jalbuddy_dev_2025
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - jalbuddy-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jalbuddy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jalbuddy-network
    restart: unless-stopped

  # Vector Database (Qdrant for RAG)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: jalbuddy-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - jalbuddy-network
    restart: unless-stopped

  # FastAPI Backend Service
  backend:
    build:
      context: ./ai-backend
      dockerfile: Dockerfile.dev
    container_name: jalbuddy-backend
    environment:
      - DATABASE_URL=postgresql://jalbuddy_user:jalbuddy_dev_2025@postgres:5432/jalbuddy
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - ENVIRONMENT=development
      - DEBUG=true
      - INGRES_API=${INGRES_API:-https://ingres.iith.ac.in/api/v1}
      - WRIS_API=${WRIS_API:-https://indiawris.gov.in/api/v1}
      - CGWB_API=${CGWB_API:-https://cgwb.gov.in/api/v1}
      - BHASHINI_API=${BHASHINI_API:-https://bhashini.gov.in/ulca/apis/v0}
    ports:
      - "8000:8000"
    volumes:
      - ./ai-backend:/app
      - ai_models:/app/models
    depends_on:
      - postgres
      - redis
      - qdrant
    networks:
      - jalbuddy-network
    restart: unless-stopped
    command: ["python", "main.py"]

  # React Frontend Service  
  frontend:
    build:
      context: ./FRONTEND
      dockerfile: Dockerfile.dev
    container_name: jalbuddy-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=development
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./FRONTEND:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - jalbuddy-network
    restart: unless-stopped

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: jalbuddy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - jalbuddy-network
    restart: unless-stopped

  # Mock WhatsApp Webhook Server (for development)
  whatsapp-mock:
    build:
      context: ./mock-services
      dockerfile: Dockerfile.whatsapp
    container_name: jalbuddy-whatsapp-mock
    ports:
      - "8080:8080"
    networks:
      - jalbuddy-network
    restart: unless-stopped

  # Mock INGRES API Server
  ingres-mock:
    build:
      context: ./mock-services
      dockerfile: Dockerfile.ingres
    container_name: jalbuddy-ingres-mock
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
    networks:
      - jalbuddy-network
    restart: unless-stopped

networks:
  jalbuddy-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  ai_models:
  zookeeper_data:
  kafka_data:
  weaviate_data:
